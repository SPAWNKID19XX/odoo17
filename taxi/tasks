ðŸ’¼ Project: CarFleetPro â€” Fleet Management System
ðŸŽ¯ Objective:

Create a custom Odoo module to manage a company's fleet of vehicles (taxi/delivery).
The module should allow the management of cars, drivers, trips, maintenance, and reporting.
ðŸ“¦ Project Structure:
ðŸ§± Models:
1. car.fleet
    name (Char) ---> Done
    license_plate (Char) ---> Done
    made_year (Integer) ---> Done
    driver_id (Many2one â†’ car.driver) ---> Done
    feature_ids (Many2many â†’ car.feature) ---> Done
    car_age (Computed field) ---> Done
    Smart button: "View Trips"

2. car.driver
    name (Char) ---> Done
    phone (Char) ---> Done
    license_number (Char) ---> Done
    car_ids (One2many â†’ car.fleet) ---> Done
    Smart button: "Driver's Trips"

3. car.trip ---> Done
    car_id (Many2one) ---> Done
    driver_id (Many2one) ---> Done
    start_time (Datetime) ---> Done
    end_time (Datetime) ---> Done
    distance_km (Float)---> Done
    duration_hours (Computed field) ---> Done

4. car.feature ---> Done
    name (Char) ---> Done
    Examples: GPS, ABS, Camera, Electric, etc. ---> Done

5. car.maintenance ---> Done
    car_id (Many2one) ---> Done
    date (Date) ---> Done
    description (Text) ---> Done
    cost (Float) ---> Done

ðŸ§  Technical Requirements (to implement):
    Use @api.depends for:
        car_age (in car.fleet)
        duration_hours (in car.trip)

    Smart buttons:
        In car.fleet: show all related trips
        In car.driver: show all trips by this driver

    XML Views:
        List (tree)
        Form
        Search views for all models

    Menu:
        Top-level: Car Fleet ---> Done
            Cars ---> Done
            Drivers ---> Done
            Trips ---> Done
            Features
            Maintenance ---> Done

    Access rights:
        Create two groups: "Fleet Manager" and "Fleet Operator"
        Optional: Add an Action Server â€” e.g., button to "Archive Old Trips"
        Optional: Generate PDF report with car trip history

ðŸ’¾ Additional Features:
    Add demo data using data/demo.xml or a Python script
    Use _sql_constraints to enforce uniqueness of license_plate
    Add @api.constrains to ensure that start_time < end_time in trips